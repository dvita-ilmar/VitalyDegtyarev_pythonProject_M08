"""
Дегтярев Виталий (группа 22/08)
Домашнее задание №8.2
Домашнее задание по теме "Сложные моменты и исключения в стеке вызовов функции"
"""
from collections.abc import Iterable


# Подсчет суммы принимаемой коллекции чисел с частичным контролем типа данных
def personal_sum(numbers):
    result = 0 # Инициализация переменной суммы чисел
    incorrect_data = 0  # Инициализация переменной количества некорректных значений коллекции
    for i in numbers:
        try:
            result += i
        except TypeError: # Обработка исключения на нечисловой тип данных
            incorrect_data += 1
            print(f'Некорректный тип данных для подсчёта суммы - {i}')
    return result, incorrect_data # Возвращается (сумма чисел, количество некорректных значений коллекции)


# Подсчет среднего значения принимаемой коллекции чисел с полным (+ на итерируемость) контролем типа данных и "деления на 0"
def calculate_average(numbers):
    result = 0 # Инициализация переменной результата выполнения функции
    try:
        for i in numbers: # "Чисто" проверка на итерируемость, вызывающая исключение ("неуклюже", но таково условие задачи)
            pass
    except TypeError: # Обработка исключения на итерируемость
        print('В numbers записан некорректный тип данных')
        return None # По условию возвращается None

    p_sum, incorrect_count = personal_sum(numbers) # Запрос суммы и количества некорректных значений коллекции
    count = len(numbers) - incorrect_count # Вычисление количества корректных значений коллекции

    try:
        result = p_sum/count
    except ZeroDivisionError: # Обработка исключения на "деление на 0"
        return 0 # По условию возвращается 0

    return result # Возврат результата - когда все должно работать


    # Запуск
if __name__ == '__main__':

    print(f'Результат 1: {calculate_average("1, 2, 3")}')  # Строка перебирается, но каждый символ - строковый тип
    print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')  # Учитываются только 1 и 3
    print(f'Результат 3: {calculate_average(567)}')  # Передана не коллекция
    print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')  # Всё должно работать